1 /*
2 라이선스 문구 ==> ?
3 */
4 
5 /*shell.c
6  :터미널에서 사용자 입력을 받고, 이에 해당하는 명령어(함수)를 실행하는 코드이다.
7  exit입력을 받기 전까지 코드가 실행된다. 입력을 받으면 g_command_list와 입력 문자열을
8  비교하여 해당 명령어(함수)를 실행한다.
9 
10 */
11 /*입력과 실행
12 :typedef void (*func)(void)는 명령어 이름을 통해 함수를 호출하기 위해 정의하였다.(motive: 4장 ppt의 마지막 페이지 참조)
13 struct functionCall은 함수 이름(문자열)과 함수 이름(함수 호출)으로 구성된다. 함수 이름(문자열)을 입력된 문자열과 비교하여
14 함수 호출을 할 수 있다. #define cmd()는 이 구조체에 함수 이름을 넣기 용이하도록 선언하였다.
15 */
16 
17 /*명령어를 추가하는 방법
18 1. 함수 작성 - parameter: char** command로 통일해야함 (typdef 보기)
19 2. FunctionCallByString에 함수이름 추가하기
20 */
21 /*to-do: how to deal with parameters?
22  $ print a bc
23 commands[2].command("a bc")
24 */
25 
26 #include "shell.h"
27 
28 /* definitions of global variable */
29 // It makes a stack.
30 // It refers to the depth which is the number how many directories are there to reach here from '/'
31 /* example
32  * /home/yhj/advanced_programming/project => 4
33  * / => 0
34  */
36 // commands
37 // 테스트용 함수
44 /*o.tsetetirw c.tsetetirw 1tset stnemmoc.tset stnemmoc-c.tset c.tset o.llehs h.llehs stnemmoc.llehs c.llehs llehs sfym o.tset_tnirp_maerts_oi c.tset_tnirp_maerts_oi tset_tnirp_maerts_oi o.maerts_oi h.maerts_oi c.maerts_oi gm.tsettini tsettini o.tnirp_sutats_sf h.tnirp_sutats_sf c.tnirp_sutats_sf h.metsys_elif o.2sdnammoc h.2sdnammoc stnemmoc.2sdnammoc c.2sdnammoc gm.tuo.a tuo.a dm.EMDAER
45     @brief echo. bash에 echo명령어 실행
46     @param command
47     @return void
48     */
59 /*o.tsetetirw c.tsetetirw 1tset stnemmoc.tset stnemmoc-c.tset c.tset o.llehs h.llehs stnemmoc.llehs c.llehs llehs sfym o.tset_tnirp_maerts_oi c.tset_tnirp_maerts_oi tset_tnirp_maerts_oi o.maerts_oi h.maerts_oi c.maerts_oi gm.tsettini tsettini o.tnirp_sutats_sf h.tnirp_sutats_sf c.tnirp_sutats_sf h.metsys_elif o.2sdnammoc h.2sdnammoc stnemmoc.2sdnammoc c.2sdnammoc gm.tuo.a tuo.a dm.EMDAER
60     @brief bash에 명령어를 실행한다. cmd에 command[i]를 이어붙이고 system을 통해 bash 명령어 처리하였다.
61     @param void
62     @return void
63     */
65 // cmd = command[1]으로 한다면, cmd에 command[]의 주소가 들어가서
66 // strcat(cmd, " ") 다음에 command[2]=" "로 바뀜
71 // printf("cmd: %sn", cmd);
78 /*o.tsetetirw c.tsetetirw 1tset stnemmoc.tset stnemmoc-c.tset c.tset o.llehs h.llehs stnemmoc.llehs c.llehs llehs sfym o.tset_tnirp_maerts_oi c.tset_tnirp_maerts_oi tset_tnirp_maerts_oi o.maerts_oi h.maerts_oi c.maerts_oi gm.tsettini tsettini o.tnirp_sutats_sf h.tnirp_sutats_sf c.tnirp_sutats_sf h.metsys_elif o.2sdnammoc h.2sdnammoc stnemmoc.2sdnammoc c.2sdnammoc gm.tuo.a tuo.a dm.EMDAER
79     @brief clear. bash에 clear명령어 실행
80     @param void
81     @return void
82     */
87 // commands list
102 // funcions for shell system
103 // main에서 실행되는 순으로 정렬하였다
106 /*o.tsetetirw c.tsetetirw 1tset stnemmoc.tset stnemmoc-c.tset c.tset o.llehs h.llehs stnemmoc.llehs c.llehs llehs sfym o.tset_tnirp_maerts_oi c.tset_tnirp_maerts_oi tset_tnirp_maerts_oi o.maerts_oi h.maerts_oi c.maerts_oi gm.tsettini tsettini o.tnirp_sutats_sf h.tnirp_sutats_sf c.tnirp_sutats_sf h.metsys_elif o.2sdnammoc h.2sdnammoc stnemmoc.2sdnammoc c.2sdnammoc gm.tuo.a tuo.a dm.EMDAER
107      @brief 기기 및 사용자 ID 출력
108      @param 기기ID, 사용자 ID
109      @return void
110      */
115 /*o.tsetetirw c.tsetetirw 1tset stnemmoc.tset stnemmoc-c.tset c.tset o.llehs h.llehs stnemmoc.llehs c.llehs llehs sfym o.tset_tnirp_maerts_oi c.tset_tnirp_maerts_oi tset_tnirp_maerts_oi o.maerts_oi h.maerts_oi c.maerts_oi gm.tsettini tsettini o.tnirp_sutats_sf h.tnirp_sutats_sf c.tnirp_sutats_sf h.metsys_elif o.2sdnammoc h.2sdnammoc stnemmoc.2sdnammoc c.2sdnammoc gm.tuo.a tuo.a dm.EMDAER
116  @brief WorkingDirectory출력; 로직이 추가되면 수정하기
117  @param 로직이 추가되면 수정하기
118  @return void
119  */
125 /*o.tsetetirw c.tsetetirw 1tset stnemmoc.tset stnemmoc-c.tset c.tset o.llehs h.llehs stnemmoc.llehs c.llehs llehs sfym o.tset_tnirp_maerts_oi c.tset_tnirp_maerts_oi tset_tnirp_maerts_oi o.maerts_oi h.maerts_oi c.maerts_oi gm.tsettini tsettini o.tnirp_sutats_sf h.tnirp_sutats_sf c.tnirp_sutats_sf h.metsys_elif o.2sdnammoc h.2sdnammoc stnemmoc.2sdnammoc c.2sdnammoc gm.tuo.a tuo.a dm.EMDAER
126      @brief 문자열 입력받기 및 개행문자 제거(없으면 n이 다음 반복 시에 영향을 준다)
127      @param 입력받은 문자열의 주소를 저장할 char double pointer
128      @return void
129      */
132 // 개행문자 제거
133 // 주소 넘겨주기
138 /*o.tsetetirw c.tsetetirw 1tset stnemmoc.tset stnemmoc-c.tset c.tset o.llehs h.llehs stnemmoc.llehs c.llehs llehs sfym o.tset_tnirp_maerts_oi c.tset_tnirp_maerts_oi tset_tnirp_maerts_oi o.maerts_oi h.maerts_oi c.maerts_oi gm.tsettini tsettini o.tnirp_sutats_sf h.tnirp_sutats_sf c.tnirp_sutats_sf h.metsys_elif o.2sdnammoc h.2sdnammoc stnemmoc.2sdnammoc c.2sdnammoc gm.tuo.a tuo.a dm.EMDAER
139      @brief input을 띄어쓰기 별로 나누어 command 배열에 저장
140      @example input="cat hello.c" ==> command[0]="cat", command[1]="hello.c"
141      @param input: 입력받은 문자열, command: 문자열을 띄어쓰기로 나누어 저장할 포인터배열
142      @return void
143      */
153 /*o.tsetetirw c.tsetetirw 1tset stnemmoc.tset stnemmoc-c.tset c.tset o.llehs h.llehs stnemmoc.llehs c.llehs llehs sfym o.tset_tnirp_maerts_oi c.tset_tnirp_maerts_oi tset_tnirp_maerts_oi o.maerts_oi h.maerts_oi c.maerts_oi gm.tsettini tsettini o.tnirp_sutats_sf h.tnirp_sutats_sf c.tnirp_sutats_sf h.metsys_elif o.2sdnammoc h.2sdnammoc stnemmoc.2sdnammoc c.2sdnammoc gm.tuo.a tuo.a dm.EMDAER
154      @brief 해당 명령어 존재 여부 확인 및 실행
155      @param 입력받은 명령어
156      @return 실행 결과(성공:1, 실패:0)
157      */
171 // 선언들
192 // 명령어 실행 성공 여부
194 // 배열의 한 칸이 char*으로, 하나의 단어를 지칭
195 // root directory
196 // 컴퓨터 및 사용자 ID
198 // 실행코드
200 // {1.ID및 WD출력   2.command 입력받기 실행하기} 반복
205 // 입력값이 없을 경우 continue;
208 // @example: input="cat hello.c"
209 //==> command[0]="cat", command[1]="hello.c"
211 // 명령어 실행 및 실행 결과 저장 1:성공, 0:실패
213 // exit 명령어 처리 및 Command not found
216 // 프로그램 종료
222 // shell

